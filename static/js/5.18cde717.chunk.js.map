{"version":3,"sources":["tester/strategies/test01.ts","tester/interfaces.ts"],"names":["debug","Debug","enter","candles","idx","trade","price","side","i","NONE","date","result","moment","hour","minute","prevCandle","open","close","BUY","SELL","exit","openedTrade","curPrice","diff","high","low","STOP_LOSS","TAKE_PROFIT","ESide"],"mappings":"0IAAA,wHAKMA,EALN,MAKcC,GAAM,UAKhBC,EAAQ,SAAUC,EAA2BC,GAE/CJ,EAAM,sBAAuBG,EAAQC,IACrC,IAAIC,EAAkB,CAAEC,MAAO,EAAGC,KAAMC,IAAQC,KAAMC,KAAM,IACxDC,GAAkB,EACtB,GAAyC,IAArCC,IAAOT,EAAQC,GAAKM,MAAMG,QAAuD,IAAvCD,IAAOT,EAAQC,GAAKM,MAAMI,SAAgB,CACtF,IAAMC,EAAaZ,EAAQC,EAAM,GACjCC,EAAMC,MAAQH,EAAQC,GAAKY,KAC3BX,EAAMK,KAAOP,EAAQC,GAAKM,KACtBK,EAAWC,KAAOD,EAAWE,MAC/BZ,EAAME,KAAOC,IAAQU,IAErBb,EAAME,KAAOC,IAAQW,KAEvBR,GAAS,EACTX,EAAM,4BAA6BK,GAGrC,MAAO,CAAEM,OAAQA,EAAQN,MAAOA,IAG9Be,EAAO,SAAUjB,EAA2BC,EAAaiB,GAE3D,IAAIhB,EAAkB,CAAEC,MAAO,EAAGC,KAAMC,IAAQC,KAAMC,KAAM,IACxDC,GAAkB,EAElBW,EAAWnB,EAAQC,GAAKY,KACxBO,EAAOD,EAAWD,EAAYf,MAClC,GAAIe,EAAYd,OAASC,IAAQU,IAAK,CACpC,GAAIK,GA/BU,IA+BUA,EAhCR,GAqCd,OAJAlB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,GAKlC,IADAkB,GADAD,EAAWnB,EAAQC,GAAKoB,MACNH,EAAYf,QAxChB,IAyCUiB,EA1CR,GA+Cd,OAJAlB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,GAKlC,IADAkB,GADAD,EAAWnB,EAAQC,GAAKqB,KACNJ,EAAYf,QAlDhB,IAmDUiB,EApDR,GAyDd,OAJAlB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,GAKlC,IADAkB,GADAD,EAAWnB,EAAQC,GAAKa,OACNI,EAAYf,QA5DhB,IA6DUiB,EA9DR,GAmEd,OAJAlB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,QAE7B,GAAIgB,EAAYd,OAASC,IAAQW,KAAM,CAC5C,GAAII,EAAQG,IAAmBH,GAAQI,GAKrC,OAJAtB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,GAKlC,IADAkB,GADAD,EAAWnB,EAAQC,GAAKoB,MACNH,EAAYf,OAClBoB,IAAmBH,GAAQI,GAKrC,OAJAtB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,GAKlC,IADAkB,GADAD,EAAWnB,EAAQC,GAAKqB,KACNJ,EAAYf,OAClBoB,IAAmBH,GAAQI,GAKrC,OAJAtB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,GAKlC,IADAkB,GADAD,EAAWnB,EAAQC,GAAKa,OACNI,EAAYf,OAClBoB,IAAmBH,GAAQI,GAKrC,OAJAtB,EAAMC,MAAQgB,EACdjB,EAAMK,KAAOP,EAAQC,GAAKM,KAC1BC,GAAS,EACTX,EAAM,2BAA4BK,GAC3B,CAAEM,OAAQA,EAAQN,MAAOA,GAMpC,MAAO,CAAEM,OAAQA,EAAQN,MAAOA,K,iCClG3B,IAAKuB,EApBZ,kC,SAoBYA,K,YAAAA,E,UAAAA,E,aAAAA,M","file":"static/js/5.18cde717.chunk.js","sourcesContent":["import moment from 'moment';\r\n//import moment from 'moment-timezone';\r\nimport * as i from './../interfaces';\r\n\r\nimport Debug from 'debug'\r\nconst debug = Debug('test01')\r\n\r\nconst TAKE_PROFIT = 20;\r\nconst STOP_LOSS = -60;\r\n\r\nlet enter = function (candles: Array<i.ICandle>, idx: number): i.IStrategyResult {\r\n  \r\n  debug('Handling candle: %O', candles[idx]);\r\n  let trade: i.ITrade = { price: 0, side: i.ESide.NONE, date: '' };\r\n  let result: boolean = false;\r\n  if (moment(candles[idx].date).hour() === 9 && moment(candles[idx].date).minute() === 5) {\r\n    const prevCandle = candles[idx - 1];\r\n    trade.price = candles[idx].open;\r\n    trade.date = candles[idx].date;\r\n    if (prevCandle.open > prevCandle.close) {\r\n      trade.side = i.ESide.BUY;\r\n    } else {\r\n      trade.side = i.ESide.SELL;\r\n    }\r\n    result = true;\r\n    debug('Enter strategy result: %O', trade);\r\n  }\r\n\r\n  return { result: result, trade: trade };\r\n}\r\n\r\nlet exit = function (candles: Array<i.ICandle>, idx: number, openedTrade: i.ITrade): i.IStrategyResult {\r\n\r\n  let trade: i.ITrade = { price: 0, side: i.ESide.NONE, date: '' };\r\n  let result: boolean = false;\r\n\r\n  let curPrice = candles[idx].open;\r\n  let diff = curPrice - openedTrade.price;\r\n  if (openedTrade.side === i.ESide.BUY) {\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].high;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].low;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].close;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n  } else if (openedTrade.side === i.ESide.SELL) {\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].high;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].low;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].close;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n  } else {\r\n    // Shouldn't happen\r\n  }\r\n\r\n  return { result: result, trade: trade };\r\n}\r\n\r\nexport {\r\n  enter,\r\n  exit\r\n}","//import Big from \"big.js\";\r\n//import moment = require(\"moment\");\r\n\r\nexport interface IExchange {\r\n  name: string,\r\n  fixed_length_name: string,\r\n  api_key: string,\r\n  secret_key: string,\r\n  passphrase?: string,\r\n  ws_timeout_ms: {\r\n    ping: number,\r\n    restart: number\r\n  },\r\n  symbol: string,\r\n  base_asset: string,\r\n  quote_asset: string,\r\n  min_trade_amount: number\r\n}\r\n\r\n/** Tester */\r\nexport enum ESide {\r\n  NONE = 'NONE',\r\n  BUY = 'BUY',\r\n  SELL = 'SELL'\r\n}\r\n\r\nexport interface ITrade {\r\n  price: number,\r\n  side: ESide,\r\n  date: string\r\n}\r\n\r\nexport interface IStrategyResult {\r\n  result: boolean,\r\n  trade: ITrade\r\n}\r\n\r\n/** XAPI */\r\nexport interface ILogin {\r\n  command: string;\r\n  arguments: {\r\n    userId: number;\r\n    password: string;\r\n  }\r\n}\r\n\r\nexport interface IGetAllSymbols {\r\n  command: string;\r\n}\r\n\r\nexport interface IChartLastRequest {\r\n  command: string;\r\n  arguments: {\r\n    info: {\r\n      period: number;\r\n      start: number;\r\n      symbol: string;\r\n    }\r\n  };\r\n}\r\n\r\nexport interface ISymbolRecord {\r\n  \"symbol\": string;\r\n  \"description\": string;\r\n  \"categoryName\": string;\r\n  \"currency\": string;\r\n}\r\n\r\nexport interface IRateInfoRecord {\r\n  close: number;\r\n  ctm: number;\r\n  ctmString: string;\r\n  high: number;\r\n  low: number;\r\n  open: number;\r\n  vol: number;\r\n}\r\n\r\n/** Alphavantage */\r\nexport interface IBestMatch {\r\n  \"1. symbol\": string;\r\n  \"2. name\": string;\r\n  \"3. type\": string;\r\n  \"4. region\": string;\r\n  \"5. marketOpen\": string;\r\n  \"6. marketClose\": string;\r\n  \"7. timezone\": string;\r\n  \"8. currency\": string;\r\n  \"9. matchScore\": string;\r\n}\r\n\r\nexport interface ITimeSeries {\r\n  \"1. open\": number;\r\n  \"2. high\": number;\r\n  \"3. low\": number;\r\n  \"4. close\": number;\r\n  \"5. volume\": number;\r\n}\r\n\r\n/** Common */\r\nexport interface ISymbol {\r\n  symbol: string;\r\n  name: string;\r\n  type: string;\r\n  currency: string;\r\n}\r\n\r\nexport interface ICandle {\r\n  date: any,\r\n  open: number,\r\n  high: number,\r\n  low: number,\r\n  close: number,\r\n  volume: number\r\n}\r\n\r\nexport interface IMyCandles {\r\n  symbol: string,\r\n  period: string,\r\n  isDefault: boolean,\r\n  candles: Array<ICandle>\r\n}"],"sourceRoot":""}
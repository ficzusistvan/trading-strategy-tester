{"version":3,"sources":["tester/strategies/test03_Zoli.ts","tester/interfaces.ts"],"names":["debug","Debug","enter","candles","idx","trade","price","side","i","NONE","date","result","moment","hour","minute","firstCandleInDay","length","isSame","searchFirstCandleInDay","console","log","open","diff","BUY","SELL","exit","openedTrade","curPrice","high","low","close","STOP_LOSS","TAKE_PROFIT","getDescription","ETesterSide"],"mappings":"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","file":"static/js/3.2886ee5c.chunk.js","sourcesContent":["import moment from 'moment';\r\n//import moment from 'moment-timezone';\r\nimport * as i from './../interfaces';\r\n\r\nimport Debug from 'debug'\r\nconst debug = Debug('test03_Zoli')\r\n\r\nconst TAKE_PROFIT = 20;\r\nconst STOP_LOSS = -60;\r\n\r\nlet searchFirstCandleInDay = function (date: moment.Moment, candles: Array<i.ICommonCandle>): i.ICommonCandle | null {\r\n  for (let i = 0; i < candles.length; i++) {\r\n    if (date.isSame(candles[i].date, \"day\")) {\r\n      return candles[i];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nlet enter = function (candles: Array<i.ICommonCandle>, idx: number): i.ITesterStrategyResult {\r\n\r\n  debug('Handling candle: %O', candles[idx]);\r\n  let trade: i.ITesterTrade = { price: 0, side: i.ETesterSide.NONE, date: '' };\r\n  let result: boolean = false;\r\n\r\n  if (moment(candles[idx].date).hour() === 9 && moment(candles[idx].date).minute() === 0) {\r\n    const firstCandleInDay = searchFirstCandleInDay(moment(candles[idx].date), candles);\r\n    console.log('First candle in day %O', firstCandleInDay);\r\n    if (firstCandleInDay !== null) {\r\n      trade.price = candles[idx].open;\r\n      trade.date = candles[idx].date;\r\n      const diff = candles[idx].open - firstCandleInDay.open;\r\n      if (diff > 0) {\r\n        trade.side = i.ETesterSide.BUY;\r\n      } else {\r\n        trade.side = i.ETesterSide.SELL;\r\n      }\r\n      result = true;\r\n      debug('Enter strategy result: %O', trade);\r\n    }\r\n  }\r\n\r\n  return { result: result, trade: trade };\r\n}\r\n\r\nlet exit = function (candles: Array<i.ICommonCandle>, idx: number, openedTrade: i.ITesterTrade): i.ITesterStrategyResult {\r\n\r\n  let trade: i.ITesterTrade = { price: 0, side: i.ETesterSide.NONE, date: '' };\r\n  let result: boolean = false;\r\n\r\n  let curPrice = candles[idx].open;\r\n  let diff = curPrice - openedTrade.price;\r\n  if (openedTrade.side === i.ETesterSide.BUY) {\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].high;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].low;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].close;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n  } else if (openedTrade.side === i.ETesterSide.SELL) {\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].high;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].low;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].close;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n  } else {\r\n    // Shouldn't happen\r\n  }\r\n\r\n  return { result: result, trade: trade };\r\n}\r\n\r\nlet getDescription = function() {\r\n  return \"The 'new' strategy. Considering the up down trend from day open to 9 o'clock.\"\r\n}\r\n\r\nexport {\r\n  enter,\r\n  exit,\r\n  getDescription\r\n}","/** Tester */\r\nexport enum ETesterSide {\r\n  NONE = 'NONE',\r\n  BUY = 'BUY',\r\n  SELL = 'SELL'\r\n}\r\n\r\nexport interface ITesterTrade {\r\n  price: number,\r\n  side: ETesterSide,\r\n  date: string\r\n}\r\n\r\nexport interface ITesterStrategyResult {\r\n  result: boolean,\r\n  trade: ITesterTrade\r\n}\r\n\r\n/** XAPI */\r\nexport interface IXAPILogin {\r\n  command: string;\r\n  arguments: {\r\n    userId: number;\r\n    password: string;\r\n  }\r\n}\r\n\r\nexport interface IXAPIGetAllSymbols {\r\n  command: string;\r\n}\r\n\r\nexport interface IXAPIChartLastRequest {\r\n  command: string;\r\n  arguments: {\r\n    info: {\r\n      period: number;\r\n      start: number;\r\n      symbol: string;\r\n    }\r\n  };\r\n}\r\n\r\nexport interface IXAPISymbolRecord {\r\n  \"symbol\": string;\r\n  \"description\": string;\r\n  \"categoryName\": string;\r\n  \"currency\": string;\r\n}\r\n\r\nexport interface IXAPIRateInfoRecord {\r\n  close: number;\r\n  ctm: number;\r\n  ctmString: string;\r\n  high: number;\r\n  low: number;\r\n  open: number;\r\n  vol: number;\r\n}\r\n\r\n/** Alphavantage */\r\nexport interface IAVBestMatch {\r\n  \"1. symbol\": string;\r\n  \"2. name\": string;\r\n  \"3. type\": string;\r\n  \"4. region\": string;\r\n  \"5. marketOpen\": string;\r\n  \"6. marketClose\": string;\r\n  \"7. timezone\": string;\r\n  \"8. currency\": string;\r\n  \"9. matchScore\": string;\r\n}\r\n\r\nexport interface IAVTimeSeries {\r\n  \"1. open\": number;\r\n  \"2. high\": number;\r\n  \"3. low\": number;\r\n  \"4. close\": number;\r\n  \"5. volume\": number;\r\n}\r\n\r\n/** Finnhub */\r\nexport interface IFinnhubStockSymbol {\r\n  description: string,\r\n  displaySymbol: string,\r\n  symbol: string\r\n}\r\n\r\nexport interface IFinnhubStockData {\r\n  c: Array<number>,\r\n  h: Array<number>,\r\n  l: Array<number>,\r\n  o: Array<number>,\r\n  s: string,\r\n  t: Array<number>,\r\n  v: Array<number>\r\n}\r\n\r\nexport interface IFinnhubExchange {\r\n  name: string,\r\n  code: string,\r\n  currency: string\r\n}\r\n\r\n/** Common */\r\nexport interface ICommonSymbol {\r\n  symbol: string;\r\n  name: string;\r\n  type: string;\r\n  currency: string;\r\n}\r\n\r\nexport interface ICommonCandle {\r\n  date: any,\r\n  open: number,\r\n  high: number,\r\n  low: number,\r\n  close: number,\r\n  volume: number\r\n}\r\n\r\nexport interface ICommonCandles {\r\n  symbol: string,\r\n  period: string,\r\n  isDefault: boolean,\r\n  candles: Array<ICommonCandle>\r\n}"],"sourceRoot":""}
{"version":3,"sources":["tester/data-sources/xAPI/api.ts","tester/data-sources/helpers.ts"],"names":["debug","Debug","addr","searchSymbol","keywords","a","ws","WebSocket","Promise","resolve","reject","addEventListener","msg","command","arguments","userId","Number","process","password","send","JSON","stringify","undefined","data","parse","streamSessionId","close","helpers","returnData","map","symbol","obj","name","type","currency","error","normalizeCandles","candles","scale","candle","console","log","date","open","high","low","volume","moment","toDate","since","Map","set","getCandles","period","info","start","subtract","get","valueOf","strin","rateInfos","Math","pow","digits","applySearchterm","symbols","keyword","filter","includes"],"mappings":"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","file":"static/js/9.bf141a7a.chunk.js","sourcesContent":["import * as helpers from '../helpers'\r\nimport Debug from 'debug'\r\nimport * as i from '../../interfaces'\r\nimport moment from 'moment';\r\n\r\nconst debug = Debug('xapi')\r\n//const HOST = 'https://xapi.xtb.com';\r\n//const DEMO_PORTS = {\r\n//  MAIN: 5124,\r\n//  STREAM: 5125\r\n//};\r\n//const REAL_PORTS = {\r\n//  MAIN: 5112,\r\n//  STREAM: 5113\r\n//};\r\n\r\nconst ADDRESS_DEMO = 'wss://ws.xtb.com/demo';\r\n//const ADDRESS_DEMO_STREAM = 'wss://ws.xtb.com/demoStream';\r\n//const ADDRESS_REAL = 'wss://ws.xtb.com/real';\r\n//const ADDRESS_REAL_STREAM = 'wss://ws.xtb.com/realStream';\r\n\r\nconst addr = ADDRESS_DEMO;\r\n\r\nconst USER_ID = process.env.REACT_APP_XAPI_USER_ID;\r\nconst PASSWORD = process.env.REACT_APP_XAPI_PASSWORD;\r\n\r\nlet normalizeSymbols = function (symbols: Array<i.IXAPISymbolRecord>) {\r\n  return symbols.map(symbol => {\r\n    let obj: i.ICommonSymbol = { symbol: '', name: '', type: '', currency: '' };\r\n    obj.symbol = symbol['symbol'];\r\n    obj.name = symbol['description'];\r\n    obj.type = symbol['categoryName'];\r\n    obj.currency = symbol['currency'];\r\n    return obj;\r\n  });\r\n}\r\n\r\nlet searchSymbol = async function (keywords: string) {\r\n  const ws: WebSocket = new WebSocket(addr);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    ws.addEventListener('open', () => {\r\n      //logger.info('Websocket opened for [' + addr + ']');\r\n      let msg: i.IXAPILogin = { command: \"login\", arguments: { userId: USER_ID ? Number(USER_ID) : 0, password: PASSWORD ? PASSWORD : '' } };\r\n      ws.send(JSON.stringify(msg));\r\n    });\r\n    ws.addEventListener('message', async (msg: any) => {\r\n      //debug('message from ws: %O', msg.data);\r\n      const data = JSON.parse(msg.data);\r\n      if (data.streamSessionId !== undefined) {\r\n        //logger.info('Websocket logged in; sending \"getAllSymbols\"...');\r\n        let msg: i.IXAPIGetAllSymbols = { command: \"getAllSymbols\" };\r\n        ws.send(JSON.stringify(msg));\r\n      } else {\r\n        //logger.info('Websocket \"getAllSymbols\" result received, returning it...');\r\n        ws.close();\r\n        resolve(helpers.applySearchterm(normalizeSymbols(data.returnData), keywords));\r\n      }\r\n    });\r\n    ws.addEventListener('close', () => {\r\n      //logger.info('Websocket closed for [' + addr + ']');\r\n    });\r\n    ws.addEventListener('ping', () => {\r\n      debug('Webocket ping received! [' + addr + ']');\r\n    });\r\n    ws.addEventListener('error', (error: any) => {\r\n      //logger.error('Websocket error for [' + addr + ']', error);\r\n    });\r\n  });\r\n}\r\n\r\nlet normalizeCandles = function (candles: Array<i.IXAPIRateInfoRecord>, scale: number) {\r\n  return candles.map(candle => {\r\n    console.log('xapi candle timestamp:', candle['ctm']); // 1585830600000. Ok with doc!\r\n    let obj: i.ICommonCandle = { date: 0, open: 0, high: 0, low: 0, close: 0, volume: 0 };\r\n\r\n    obj.date = moment(candle['ctm']).toDate(); // Time is number of milliseconds from 01.01.1970, 00:00 GMT. e.g.: 1272529161605\r\n    obj.open = candle['open'] / scale;\r\n    obj.high = obj.open + candle['high'] / scale;\r\n    obj.low = obj.open + candle['low'] / scale;\r\n    obj.close = obj.open + candle['close'] / scale;\r\n    obj.volume = candle['vol'];\r\n\r\n    return obj;\r\n  });\r\n}\r\n\r\nconst since = new Map();\r\nsince.set(1, 1);\r\nsince.set(5, 1);\r\nsince.set(15, 1);\r\nsince.set(30, 7);\r\nsince.set(60, 7);\r\nsince.set(240, 13);\r\nsince.set(1440, 13);\r\nsince.set(10080, 60);\r\nsince.set(43200, 60);\r\n\r\nlet getCandles = async function (symbol: string, period: number) {\r\n  const ws: WebSocket = new WebSocket(addr);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    ws.addEventListener('open', () => {\r\n      //logger.info('Websocket opened for [' + addr + ']');\r\n      let msg: i.IXAPILogin = { command: \"login\", arguments: { userId: USER_ID ? Number(USER_ID) : 0, password: PASSWORD ? PASSWORD : '' } };\r\n      ws.send(JSON.stringify(msg));\r\n    });\r\n    ws.addEventListener('message', async (msg: any) => {\r\n      //debug('message from ws: %O', msg.data);\r\n      const data = JSON.parse(msg.data);\r\n      if (data.streamSessionId !== undefined) {\r\n        //logger.info('Websocket logged in; sending \"getChartLastRequest\"...');\r\n        let msg: i.IXAPIChartLastRequest = { command: \"getChartLastRequest\", arguments: { info: { period: Number(period), start: moment().subtract(since.get(Number(period)), 'month').valueOf(), symbol: symbol } } };\r\n        let strin = JSON.stringify(msg);\r\n        debug('Strin', strin);\r\n        ws.send(strin);\r\n      } else {\r\n        //logger.info('Websocket \"getChartLastRequest\" result received, returning it...');\r\n        ws.close();\r\n        resolve(normalizeCandles(data.returnData.rateInfos, Math.pow(10, data.returnData.digits)));\r\n      }\r\n    });\r\n    ws.addEventListener('close', () => {\r\n      //logger.info('Websocket closed for [' + addr + ']');\r\n    });\r\n    ws.addEventListener('ping', () => {\r\n      debug('Webocket ping received! [' + addr + ']');\r\n    });\r\n    ws.addEventListener('error', (error: any) => {\r\n      //logger.error('Websocket error for [' + addr + ']', error);\r\n    });\r\n  });\r\n}\r\n\r\nexport {\r\n  searchSymbol,\r\n  getCandles\r\n}","import * as i from '../interfaces';\r\n\r\nexport let applySearchterm = function(symbols: Array<i.ICommonSymbol>, keyword: string) {\r\n  return symbols.filter(symbol => {\r\n    return symbol.symbol.includes(keyword) || symbol.name.includes(keyword);\r\n  });\r\n}"],"sourceRoot":""}
{"version":3,"sources":["tester/strategies/test02.ts","tester/interfaces.ts"],"names":["debug","Debug","enter","candles","idx","trade","price","side","i","NONE","date","result","prev1Candle","prev2Candle","prev3Candle","open","close","SELL","BUY","exit","openedTrade","curPrice","diff","high","low","STOP_LOSS","TAKE_PROFIT","getDescription","ETesterSide"],"mappings":"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","file":"static/js/2.e6789cbb.chunk.js","sourcesContent":["//import moment from 'moment';\r\nimport * as i from './../interfaces';\r\n\r\nimport Debug from 'debug'\r\nconst debug = Debug('test02')\r\n\r\nconst TAKE_PROFIT = 2;\r\nconst STOP_LOSS = -3;\r\n\r\nlet enter = function (candles: Array<i.ICommonCandle>, idx: number): i.ITesterStrategyResult {\r\n\r\n  debug('Handling candle: %O', candles[idx]);\r\n  let trade: i.ITesterTrade = { price: 0, side: i.ETesterSide.NONE, date: '' };\r\n  let result: boolean = false;\r\n  if (idx > 2) {\r\n    const prev1Candle = candles[idx - 1];\r\n    const prev2Candle = candles[idx - 2];\r\n    const prev3Candle = candles[idx - 3];\r\n    if (prev1Candle.open < prev1Candle.close && prev2Candle.open < prev2Candle.close && prev3Candle.open < prev3Candle.close) {\r\n      // price is rising fast, expect fall\r\n      trade.price = candles[idx].open;\r\n      trade.date = candles[idx].date;\r\n      trade.side = i.ETesterSide.SELL;\r\n      result = true;\r\n    }\r\n    if (prev1Candle.open > prev1Candle.close && prev2Candle.open > prev2Candle.close && prev3Candle.open > prev3Candle.close) {\r\n      // price is falling fast, expect rise\r\n      trade.price = candles[idx].open;\r\n      trade.date = candles[idx].date;\r\n      trade.side = i.ETesterSide.BUY;\r\n      result = true;\r\n    }\r\n  }\r\n  debug('Enter strategy result: %O', trade);\r\n\r\n  return { result: result, trade: trade };\r\n}\r\n\r\nlet exit = function (candles: Array<i.ICommonCandle>, idx: number, openedTrade: i.ITesterTrade): i.ITesterStrategyResult {\r\n\r\n  let trade: i.ITesterTrade = { price: 0, side: i.ETesterSide.NONE, date: '' };\r\n  let result: boolean = false;\r\n\r\n  let curPrice = candles[idx].open;\r\n  let diff = curPrice - openedTrade.price;\r\n  if (openedTrade.side === i.ETesterSide.BUY) {\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].high;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].low;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].close;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff < STOP_LOSS || diff > TAKE_PROFIT) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n  } else if (openedTrade.side === i.ETesterSide.SELL) {\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].high;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].low;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n\r\n    curPrice = candles[idx].close;\r\n    diff = curPrice - openedTrade.price;\r\n    if (diff > (STOP_LOSS * -1) || diff < (TAKE_PROFIT * -1)) {\r\n      trade.price = curPrice;\r\n      trade.date = candles[idx].date;\r\n      result = true;\r\n      debug('Exit strategy result: %O', trade);\r\n      return { result: result, trade: trade };\r\n    }\r\n  } else {\r\n    // Shouldn't happen\r\n  }\r\n\r\n  return { result: result, trade: trade };\r\n}\r\n\r\nlet getDescription = function() {\r\n  return \"A simple test strategy\"\r\n}\r\n\r\nexport {\r\n  enter,\r\n  exit,\r\n  getDescription\r\n}","/** Tester */\r\nexport enum ETesterSide {\r\n  NONE = 'NONE',\r\n  BUY = 'BUY',\r\n  SELL = 'SELL'\r\n}\r\n\r\nexport interface ITesterTrade {\r\n  price: number,\r\n  side: ETesterSide,\r\n  date: string\r\n}\r\n\r\nexport interface ITesterStrategyResult {\r\n  result: boolean,\r\n  trade: ITesterTrade\r\n}\r\n\r\n/** XAPI */\r\nexport interface IXAPILogin {\r\n  command: string;\r\n  arguments: {\r\n    userId: number;\r\n    password: string;\r\n  }\r\n}\r\n\r\nexport interface IXAPIGetAllSymbols {\r\n  command: string;\r\n}\r\n\r\nexport interface IXAPIChartLastRequest {\r\n  command: string;\r\n  arguments: {\r\n    info: {\r\n      period: number;\r\n      start: number;\r\n      symbol: string;\r\n    }\r\n  };\r\n}\r\n\r\nexport interface IXAPISymbolRecord {\r\n  \"symbol\": string;\r\n  \"description\": string;\r\n  \"categoryName\": string;\r\n  \"currency\": string;\r\n}\r\n\r\nexport interface IXAPIRateInfoRecord {\r\n  close: number;\r\n  ctm: number;\r\n  ctmString: string;\r\n  high: number;\r\n  low: number;\r\n  open: number;\r\n  vol: number;\r\n}\r\n\r\n/** Alphavantage */\r\nexport interface IAVBestMatch {\r\n  \"1. symbol\": string;\r\n  \"2. name\": string;\r\n  \"3. type\": string;\r\n  \"4. region\": string;\r\n  \"5. marketOpen\": string;\r\n  \"6. marketClose\": string;\r\n  \"7. timezone\": string;\r\n  \"8. currency\": string;\r\n  \"9. matchScore\": string;\r\n}\r\n\r\nexport interface IAVTimeSeries {\r\n  \"1. open\": number;\r\n  \"2. high\": number;\r\n  \"3. low\": number;\r\n  \"4. close\": number;\r\n  \"5. volume\": number;\r\n}\r\n\r\n/** Finnhub */\r\nexport interface IFinnhubStockSymbol {\r\n  description: string,\r\n  displaySymbol: string,\r\n  symbol: string\r\n}\r\n\r\nexport interface IFinnhubStockData {\r\n  c: Array<number>,\r\n  h: Array<number>,\r\n  l: Array<number>,\r\n  o: Array<number>,\r\n  s: string,\r\n  t: Array<number>,\r\n  v: Array<number>\r\n}\r\n\r\nexport interface IFinnhubExchange {\r\n  name: string,\r\n  code: string,\r\n  currency: string\r\n}\r\n\r\n/** Common */\r\nexport interface ICommonSymbol {\r\n  symbol: string;\r\n  name: string;\r\n  type: string;\r\n  currency: string;\r\n}\r\n\r\nexport interface ICommonCandle {\r\n  date: any,\r\n  open: number,\r\n  high: number,\r\n  low: number,\r\n  close: number,\r\n  volume: number\r\n}\r\n\r\nexport interface ICommonCandles {\r\n  symbol: string,\r\n  period: string,\r\n  isDefault: boolean,\r\n  candles: Array<ICommonCandle>\r\n}"],"sourceRoot":""}